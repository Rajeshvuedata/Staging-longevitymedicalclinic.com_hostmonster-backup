--- lib/phpseclib/Crypt/RC4.php
+++ lib/phpseclib/Crypt/RC4.php
@@ -1,11 +1,12 @@
 <?php
+/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */
 
 /**
  * Pure-PHP implementation of RC4.
  *
  * Uses mcrypt, if available, and an internal implementation, otherwise.
  *
- * PHP version 5
+ * PHP versions 4 and 5
  *
  * Useful resources are as follows:
  *
@@ -13,14 +14,14 @@
  *  - {@link http://en.wikipedia.org/wiki/RC4 - Wikipedia: RC4}
  *
  * RC4 is also known as ARCFOUR or ARC4.  The reason is elaborated upon at Wikipedia.  This class is named RC4 and not
- * ARCFOUR or ARC4 because RC4 is how it is referred to in the SSH1 specification.
+ * ARCFOUR or ARC4 because RC4 is how it is refered to in the SSH1 specification.
  *
  * Here's a short example of how to use this library:
  * <code>
  * <?php
- *    include 'vendor/autoload.php';
+ *    include('Crypt/RC4.php');
  *
- *    $rc4 = new \phpseclib\Crypt\RC4();
+ *    $rc4 = new Crypt_RC4();
  *
  *    $rc4->setKey('abcdefgh');
  *
@@ -34,137 +35,198 @@
  * ?>
  * </code>
  *
- * @category  Crypt
- * @package   RC4
- * @author    Jim Wigginton <terrafrost@php.net>
- * @copyright 2007 Jim Wigginton
- * @license   http://www.opensource.org/licenses/mit-license.html  MIT License
- * @link      http://phpseclib.sourceforge.net
+ * LICENSE: This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA  02111-1307  USA
+ *
+ * @category   Crypt
+ * @package    Crypt_RC4
+ * @author     Jim Wigginton <terrafrost@php.net>
+ * @copyright  MMVII Jim Wigginton
+ * @license    http://www.gnu.org/licenses/lgpl.txt
+ * @version    $Id: RC4.php,v 1.8 2009/06/09 04:00:38 terrafrost Exp $
+ * @link       http://phpseclib.sourceforge.net
  */
 
-namespace phpseclib\Crypt;
+/**#@+
+ * @access private
+ * @see Crypt_RC4::Crypt_RC4()
+ */
+/**
+ * Toggles the internal implementation
+ */
+define('CRYPT_RC4_MODE_INTERNAL', 1);
+/**
+ * Toggles the mcrypt implementation
+ */
+define('CRYPT_RC4_MODE_MCRYPT', 2);
+/**#@-*/
+
+/**#@+
+ * @access private
+ * @see Crypt_RC4::_crypt()
+ */
+define('CRYPT_RC4_ENCRYPT', 0);
+define('CRYPT_RC4_DECRYPT', 1);
+/**#@-*/
 
 /**
  * Pure-PHP implementation of RC4.
  *
- * @package RC4
  * @author  Jim Wigginton <terrafrost@php.net>
+ * @version 0.1.0
  * @access  public
+ * @package Crypt_RC4
  */
-class RC4 extends Base
-{
-    /**#@+
+class Crypt_RC4 {
+    /**
+     * The Key
+     *
+     * @see Crypt_RC4::setKey()
+     * @var String
      * @access private
-     * @see \phpseclib\Crypt\RC4::_crypt()
-    */
-    const ENCRYPT = 0;
-    const DECRYPT = 1;
-    /**#@-*/
+     */
+    var $key = "\0";
 
     /**
-     * Block Length of the cipher
+     * The Key Stream for encryption
      *
-     * RC4 is a stream cipher
-     * so we the block_size to 0
+     * If CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT, this will be equal to the mcrypt object
      *
-     * @see \phpseclib\Crypt\Base::block_size
-     * @var int
+     * @see Crypt_RC4::setKey()
+     * @var Array
      * @access private
      */
-    var $block_size = 0;
+    var $encryptStream = false;
 
     /**
-     * Key Length (in bytes)
+     * The Key Stream for decryption
+     *
+     * If CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT, this will be equal to the mcrypt object
      *
-     * @see \phpseclib\Crypt\RC4::setKeyLength()
-     * @var int
+     * @see Crypt_RC4::setKey()
+     * @var Array
      * @access private
      */
-    var $key_length = 128; // = 1024 bits
+    var $decryptStream = false;
 
     /**
-     * The mcrypt specific name of the cipher
+     * The $i and $j indexes for encryption
      *
-     * @see \phpseclib\Crypt\Base::cipher_name_mcrypt
-     * @var string
+     * @see Crypt_RC4::_crypt()
+     * @var Integer
      * @access private
      */
-    var $cipher_name_mcrypt = 'arcfour';
+    var $encryptIndex = 0;
 
     /**
-     * Holds whether performance-optimized $inline_crypt() can/should be used.
+     * The $i and $j indexes for decryption
      *
-     * @see \phpseclib\Crypt\Base::inline_crypt
-     * @var mixed
+     * @see Crypt_RC4::_crypt()
+     * @var Integer
      * @access private
      */
-    var $use_inline_crypt = false; // currently not available
+    var $decryptIndex = 0;
 
     /**
-     * The Key
+     * MCrypt parameters
      *
-     * @see self::setKey()
-     * @var string
+     * @see Crypt_RC4::setMCrypt()
+     * @var Array
      * @access private
      */
-    var $key;
+    var $mcrypt = array('', '');
 
     /**
-     * The Key Stream for decryption and encryption
+     * The Encryption Algorithm
+     *
+     * Only used if CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT.  Only possible values are MCRYPT_RC4 or MCRYPT_ARCFOUR.
      *
-     * @see self::setKey()
-     * @var array
+     * @see Crypt_RC4::Crypt_RC4()
+     * @var Integer
      * @access private
      */
-    var $stream;
+    var $mode;
 
     /**
      * Default Constructor.
      *
      * Determines whether or not the mcrypt extension should be used.
      *
-     * @see \phpseclib\Crypt\Base::__construct()
-     * @return \phpseclib\Crypt\RC4
+     * @param optional Integer $mode
+     * @return Crypt_RC4
      * @access public
      */
-    function __construct()
+    function Crypt_RC4()
     {
-        parent::__construct(Base::MODE_STREAM);
+        if ( !defined('CRYPT_RC4_MODE') ) {
+            switch (true) {
+                case extension_loaded('mcrypt') && (defined('MCRYPT_ARCFOUR') || defined('MCRYPT_RC4')):
+                    // i'd check to see if rc4 was supported, by doing in_array('arcfour', mcrypt_list_algorithms('')),
+                    // but since that can be changed after the object has been created, there doesn't seem to be
+                    // a lot of point...
+                    define('CRYPT_RC4_MODE', CRYPT_RC4_MODE_MCRYPT);
+                    break;
+                default:
+                    define('CRYPT_RC4_MODE', CRYPT_RC4_MODE_INTERNAL);
+            }
+        }
+
+        switch ( CRYPT_RC4_MODE ) {
+            case CRYPT_RC4_MODE_MCRYPT:
+                switch (true) {
+                    case defined('MCRYPT_ARCFOUR'):
+                        $this->mode = MCRYPT_ARCFOUR;
+                        break;
+                    case defined('MCRYPT_RC4');
+                        $this->mode = MCRYPT_RC4;
+                }
+        }
     }
 
     /**
-     * Test for engine validity
+     * Sets the key.
      *
-     * This is mainly just a wrapper to set things up for \phpseclib\Crypt\Base::isValidEngine()
+     * Keys can be between 1 and 256 bytes long.  If they are longer then 256 bytes, the first 256 bytes will
+     * be used.  If no key is explicitly set, it'll be assumed to be a single null byte.
      *
-     * @see \phpseclib\Crypt\Base::__construct()
-     * @param int $engine
      * @access public
-     * @return bool
+     * @param String $key
      */
-    function isValidEngine($engine)
+    function setKey($key)
     {
-        if ($engine == Base::ENGINE_OPENSSL) {
-            if (version_compare(PHP_VERSION, '5.3.7') >= 0) {
-                $this->cipher_name_openssl = 'rc4-40';
-            } else {
-                switch (strlen($this->key)) {
-                    case 5:
-                        $this->cipher_name_openssl = 'rc4-40';
-                        break;
-                    case 8:
-                        $this->cipher_name_openssl = 'rc4-64';
-                        break;
-                    case 16:
-                        $this->cipher_name_openssl = 'rc4';
-                        break;
-                    default:
-                        return false;
-                }
-            }
+        $this->key = $key;
+
+        if ( CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT ) {
+            return;
+        }
+
+        $keyLength = strlen($key);
+        $keyStream = array();
+        for ($i = 0; $i < 256; $i++) {
+            $keyStream[$i] = $i;
+        }
+        $j = 0;
+        for ($i = 0; $i < 256; $i++) {
+            $j = ($j + $keyStream[$i] + ord($key[$i % $keyLength])) & 255;
+            $temp = $keyStream[$i];
+            $keyStream[$i] = $keyStream[$j];
+            $keyStream[$j] = $temp;
         }
 
-        return parent::isValidEngine($engine);
+        $this->encryptIndex = $this->decryptIndex = array(0, 0);
+        $this->encryptStream = $this->decryptStream = $keyStream;
     }
 
     /**
@@ -182,8 +244,8 @@
      * {@link http://www.rsa.com/rsalabs/node.asp?id=2009 http://www.rsa.com/rsalabs/node.asp?id=2009}
      * {@link http://en.wikipedia.org/wiki/Related_key_attack http://en.wikipedia.org/wiki/Related_key_attack}
      *
-     * @param string $iv
-     * @see self::setKey()
+     * @param String $iv
+     * @see Crypt_RC4::setKey()
      * @access public
      */
     function setIV($iv)
@@ -191,152 +253,241 @@
     }
 
     /**
-     * Sets the key length
+     * Sets MCrypt parameters. (optional)
      *
-     * Keys can be between 1 and 256 bytes long.
+     * If MCrypt is being used, empty strings will be used, unless otherwise specified.
      *
+     * @link http://php.net/function.mcrypt-module-open#function.mcrypt-module-open
      * @access public
-     * @param int $length
+     * @param optional Integer $algorithm_directory
+     * @param optional Integer $mode_directory
      */
-    function setKeyLength($length)
+    function setMCrypt($algorithm_directory = '', $mode_directory = '')
     {
-        if ($length < 8) {
-            $this->key_length = 1;
-        } elseif ($length > 2048) {
-            $this->key_length = 256;
-        } else {
-            $this->key_length = $length >> 3;
+        if ( CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT ) {
+            $this->mcrypt = array($algorithm_directory, $mode_directory);
+            $this->_closeMCrypt();
         }
-
-        parent::setKeyLength($length);
     }
 
     /**
      * Encrypts a message.
      *
-     * @see \phpseclib\Crypt\Base::decrypt()
-     * @see self::_crypt()
+     * @see Crypt_RC4::_crypt()
      * @access public
-     * @param string $plaintext
-     * @return string $ciphertext
+     * @param String $plaintext
      */
     function encrypt($plaintext)
     {
-        if ($this->engine != Base::ENGINE_INTERNAL) {
-            return parent::encrypt($plaintext);
-        }
-        return $this->_crypt($plaintext, self::ENCRYPT);
+        return $this->_crypt($plaintext, CRYPT_RC4_ENCRYPT);
     }
 
     /**
      * Decrypts a message.
      *
      * $this->decrypt($this->encrypt($plaintext)) == $this->encrypt($this->encrypt($plaintext)).
-     * At least if the continuous buffer is disabled.
+     * Atleast if the continuous buffer is disabled.
      *
-     * @see \phpseclib\Crypt\Base::encrypt()
-     * @see self::_crypt()
+     * @see Crypt_RC4::_crypt()
      * @access public
-     * @param string $ciphertext
-     * @return string $plaintext
+     * @param String $ciphertext
      */
     function decrypt($ciphertext)
     {
-        if ($this->engine != Base::ENGINE_INTERNAL) {
-            return parent::decrypt($ciphertext);
-        }
-        return $this->_crypt($ciphertext, self::DECRYPT);
+        return $this->_crypt($ciphertext, CRYPT_RC4_DECRYPT);
     }
 
     /**
-     * Encrypts a block
+     * Encrypts or decrypts a message.
      *
+     * @see Crypt_RC4::encrypt()
+     * @see Crypt_RC4::decrypt()
      * @access private
-     * @param string $in
+     * @param String $text
+     * @param Integer $mode
      */
-    function _encryptBlock($in)
+    function _crypt($text, $mode)
     {
-        // RC4 does not utilize this method
+        if ( CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT ) {
+            $keyStream = $mode == CRYPT_RC4_ENCRYPT ? 'encryptStream' : 'decryptStream';
+
+            if ($this->$keyStream === false) {
+                $this->$keyStream = mcrypt_module_open($this->mode, $this->mcrypt[0], MCRYPT_MODE_STREAM, $this->mcrypt[1]);
+                mcrypt_generic_init($this->$keyStream, $this->key, '');
+            } else if (!$this->continuousBuffer) {
+                mcrypt_generic_init($this->$keyStream, $this->key, '');
+            }
+            $newText = mcrypt_generic($this->$keyStream, $text);
+            if (!$this->continuousBuffer) {
+                mcrypt_generic_deinit($this->$keyStream);
+            }
+
+            return $newText;
+        }
+
+        if ($this->encryptStream === false) {
+            $this->setKey($this->key);
+        }
+
+        switch ($mode) {
+            case CRYPT_RC4_ENCRYPT:
+                $keyStream = $this->encryptStream;
+                list($i, $j) = $this->encryptIndex;
+                break;
+            case CRYPT_RC4_DECRYPT:
+                $keyStream = $this->decryptStream;
+                list($i, $j) = $this->decryptIndex;
+        }
+
+        $newText = '';
+        for ($k = 0; $k < strlen($text); $k++) {
+            $i = ($i + 1) & 255;
+            $j = ($j + $keyStream[$i]) & 255;
+            $temp = $keyStream[$i];
+            $keyStream[$i] = $keyStream[$j];
+            $keyStream[$j] = $temp;
+            $temp = $keyStream[($keyStream[$i] + $keyStream[$j]) & 255];
+            $newText.= chr(ord($text[$k]) ^ $temp);
+        }
+
+        if ($this->continuousBuffer) {
+            switch ($mode) {
+                case CRYPT_RC4_ENCRYPT:
+                    $this->encryptStream = $keyStream;
+                    $this->encryptIndex = array($i, $j);
+                    break;
+                case CRYPT_RC4_DECRYPT:
+                    $this->decryptStream = $keyStream;
+                    $this->decryptIndex = array($i, $j);
+            }
+        }
+
+        return $newText;
     }
 
     /**
-     * Decrypts a block
+     * Treat consecutive "packets" as if they are a continuous buffer.
+     *
+     * Say you have a 16-byte plaintext $plaintext.  Using the default behavior, the two following code snippets
+     * will yield different outputs:
+     *
+     * <code>
+     *    echo $rc4->encrypt(substr($plaintext, 0, 8));
+     *    echo $rc4->encrypt(substr($plaintext, 8, 8));
+     * </code>
+     * <code>
+     *    echo $rc4->encrypt($plaintext);
+     * </code>
      *
-     * @access private
-     * @param string $in
+     * The solution is to enable the continuous buffer.  Although this will resolve the above discrepancy, it creates
+     * another, as demonstrated with the following:
+     *
+     * <code>
+     *    $rc4->encrypt(substr($plaintext, 0, 8));
+     *    echo $rc4->decrypt($des->encrypt(substr($plaintext, 8, 8)));
+     * </code>
+     * <code>
+     *    echo $rc4->decrypt($des->encrypt(substr($plaintext, 8, 8)));
+     * </code>
+     *
+     * With the continuous buffer disabled, these would yield the same output.  With it enabled, they yield different
+     * outputs.  The reason is due to the fact that the initialization vector's change after every encryption /
+     * decryption round when the continuous buffer is enabled.  When it's disabled, they remain constant.
+     *
+     * Put another way, when the continuous buffer is enabled, the state of the Crypt_DES() object changes after each
+     * encryption / decryption round, whereas otherwise, it'd remain constant.  For this reason, it's recommended that
+     * continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),
+     * however, they are also less intuitive and more likely to cause you problems.
+     *
+     * @see Crypt_RC4::disableContinuousBuffer()
+     * @access public
      */
-    function _decryptBlock($in)
+    function enableContinuousBuffer()
     {
-        // RC4 does not utilize this method
+        $this->continuousBuffer = true;
     }
 
     /**
-     * Setup the key (expansion)
+     * Treat consecutive packets as if they are a discontinuous buffer.
+     *
+     * The default behavior.
      *
-     * @see \phpseclib\Crypt\Base::_setupKey()
-     * @access private
+     * @see Crypt_RC4::enableContinuousBuffer()
+     * @access public
      */
-    function _setupKey()
+    function disableContinuousBuffer()
     {
-        $key = $this->key;
-        $keyLength = strlen($key);
-        $keyStream = range(0, 255);
-        $j = 0;
-        for ($i = 0; $i < 256; $i++) {
-            $j = ($j + $keyStream[$i] + ord($key[$i % $keyLength])) & 255;
-            $temp = $keyStream[$i];
-            $keyStream[$i] = $keyStream[$j];
-            $keyStream[$j] = $temp;
+        if ( CRYPT_RC4_MODE == CRYPT_RC4_MODE_INTERNAL ) {
+            $this->encryptIndex = $this->decryptIndex = array(0, 0);
+            $this->setKey($this->key);
         }
 
-        $this->stream = array();
-        $this->stream[self::DECRYPT] = $this->stream[self::ENCRYPT] = array(
-            0, // index $i
-            0, // index $j
-            $keyStream
-        );
+        $this->continuousBuffer = false;
     }
 
     /**
-     * Encrypts or decrypts a message.
+     * Dummy function.
+     *
+     * Since RC4 is a stream cipher and not a block cipher, no padding is necessary.  The only reason this function is
+     * included is so that you can switch between a block cipher and a stream cipher transparently.
+     *
+     * @see Crypt_RC4::disablePadding()
+     * @access public
+     */
+    function enablePadding()
+    {
+    }
+
+    /**
+     * Dummy function.
+     *
+     * @see Crypt_RC4::enablePadding()
+     * @access public
+     */
+    function disablePadding()
+    {
+    }
+
+    /**
+     * Class destructor.
+     *
+     * Will be called, automatically, if you're using PHP5.  If you're using PHP4, call it yourself.  Only really
+     * needs to be called if mcrypt is being used.
      *
-     * @see self::encrypt()
-     * @see self::decrypt()
-     * @access private
-     * @param string $text
-     * @param int $mode
-     * @return string $text
+     * @access public
      */
-    function _crypt($text, $mode)
+    function __destruct()
     {
-        if ($this->changed) {
-            $this->_setup();
-            $this->changed = false;
+        if ( CRYPT_RC4_MODE == CRYPT_RC4_MODE_MCRYPT ) {
+            $this->_closeMCrypt();
         }
+    }
+
+    /**
+     * Properly close the MCrypt objects.
+     *
+     * @access prviate
+     */
+    function _closeMCrypt()
+    {
+        if ( $this->encryptStream !== false ) {
+            if ( $this->continuousBuffer ) {
+                mcrypt_generic_deinit($this->encryptStream);
+            }
+
+            mcrypt_module_close($this->encryptStream);
 
-        $stream = &$this->stream[$mode];
-        if ($this->continuousBuffer) {
-            $i = &$stream[0];
-            $j = &$stream[1];
-            $keyStream = &$stream[2];
-        } else {
-            $i = $stream[0];
-            $j = $stream[1];
-            $keyStream = $stream[2];
+            $this->encryptStream = false;
         }
 
-        $len = strlen($text);
-        for ($k = 0; $k < $len; ++$k) {
-            $i = ($i + 1) & 255;
-            $ksi = $keyStream[$i];
-            $j = ($j + $ksi) & 255;
-            $ksj = $keyStream[$j];
+        if ( $this->decryptStream !== false ) {
+            if ( $this->continuousBuffer ) {
+                mcrypt_generic_deinit($this->decryptStream);
+            }
+
+            mcrypt_module_close($this->decryptStream);
 
-            $keyStream[$i] = $ksj;
-            $keyStream[$j] = $ksi;
-            $text[$k] = $text[$k] ^ chr($keyStream[($ksj + $ksi) & 255]);
+            $this->decryptStream = false;
         }
-
-        return $text;
     }
 }
