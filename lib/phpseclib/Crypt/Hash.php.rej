--- lib/phpseclib/Crypt/Hash.php
+++ lib/phpseclib/Crypt/Hash.php
@@ -1,26 +1,27 @@
 <?php
+/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */
 
 /**
  * Pure-PHP implementations of keyed-hash message authentication codes (HMACs) and various cryptographic hashing functions.
  *
  * Uses hash() or mhash() if available and an internal implementation, otherwise.  Currently supports the following:
  *
- * md2, md5, md5-96, sha1, sha1-96, sha256, sha256-96, sha384, and sha512, sha512-96
+ * md2, md5, md5-96, sha1, sha1-96, sha256, sha384, and sha512
  *
- * If {@link self::setKey() setKey()} is called, {@link self::hash() hash()} will return the HMAC as opposed to
+ * If {@link Crypt_Hash::setKey() setKey()} is called, {@link Crypt_Hash::hash() hash()} will return the HMAC as opposed to
  * the hash.  If no valid algorithm is provided, sha1 will be used.
  *
- * PHP version 5
+ * PHP versions 4 and 5
  *
- * {@internal The variable names are the same as those in
+ * {@internal The variable names are the same as those in 
  * {@link http://tools.ietf.org/html/rfc2104#section-2 RFC2104}.}}
  *
  * Here's a short example of how to use this library:
  * <code>
  * <?php
- *    include 'vendor/autoload.php';
+ *    include('Crypt/Hash.php');
  *
- *    $hash = new \phpseclib\Crypt\Hash('sha1');
+ *    $hash = new Crypt_Hash('sha1');
  *
  *    $hash->setKey('abcdefg');
  *
@@ -28,59 +29,62 @@
  * ?>
  * </code>
  *
- * @category  Crypt
- * @package   Hash
- * @author    Jim Wigginton <terrafrost@php.net>
- * @copyright 2007 Jim Wigginton
- * @license   http://www.opensource.org/licenses/mit-license.html  MIT License
- * @link      http://phpseclib.sourceforge.net
+ * LICENSE: This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA  02111-1307  USA
+ *
+ * @category   Crypt
+ * @package    Crypt_Hash
+ * @author     Jim Wigginton <terrafrost@php.net>
+ * @copyright  MMVII Jim Wigginton
+ * @license    http://www.gnu.org/licenses/lgpl.txt
+ * @version    $Id: Hash.php,v 1.6 2009/11/23 23:37:07 terrafrost Exp $
+ * @link       http://phpseclib.sourceforge.net
  */
 
-namespace phpseclib\Crypt;
-
-use phpseclib\Math\BigInteger;
+/**#@+
+ * @access private
+ * @see Crypt_Hash::Crypt_Hash()
+ */
+/**
+ * Toggles the internal implementation
+ */
+define('CRYPT_HASH_MODE_INTERNAL', 1);
+/**
+ * Toggles the mhash() implementation, which has been deprecated on PHP 5.3.0+.
+ */
+define('CRYPT_HASH_MODE_MHASH',    2);
+/**
+ * Toggles the hash() implementation, which works on PHP 5.1.2+.
+ */
+define('CRYPT_HASH_MODE_HASH',     3);
+/**#@-*/
 
 /**
  * Pure-PHP implementations of keyed-hash message authentication codes (HMACs) and various cryptographic hashing functions.
  *
- * @package Hash
  * @author  Jim Wigginton <terrafrost@php.net>
+ * @version 0.1.0
  * @access  public
+ * @package Crypt_Hash
  */
-class Hash
-{
-    /**#@+
-     * @access private
-     * @see \phpseclib\Crypt\Hash::__construct()
-     */
-    /**
-     * Toggles the internal implementation
-     */
-    const MODE_INTERNAL = 1;
-    /**
-     * Toggles the mhash() implementation, which has been deprecated on PHP 5.3.0+.
-     */
-    const MODE_MHASH = 2;
-    /**
-     * Toggles the hash() implementation, which works on PHP 5.1.2+.
-     */
-    const MODE_HASH = 3;
-    /**#@-*/
-
-    /**
-     * Hash Parameter
-     *
-     * @see self::setHash()
-     * @var int
-     * @access private
-     */
-    var $hashParam;
-
+class Crypt_Hash {
     /**
      * Byte-length of compression blocks / key (Internal HMAC)
      *
-     * @see self::setAlgorithm()
-     * @var int
+     * @see Crypt_Hash::setAlgorithm()
+     * @var Integer
      * @access private
      */
     var $b;
@@ -88,8 +92,8 @@
     /**
      * Byte-length of hash output (Internal HMAC)
      *
-     * @see self::setHash()
-     * @var int
+     * @see Crypt_Hash::setHash()
+     * @var Integer
      * @access private
      */
     var $l = false;
@@ -97,8 +101,8 @@
     /**
      * Hash Algorithm
      *
-     * @see self::setHash()
-     * @var string
+     * @see Crypt_Hash::setHash()
+     * @var String
      * @access private
      */
     var $hash;
@@ -106,17 +110,17 @@
     /**
      * Key
      *
-     * @see self::setKey()
-     * @var string
+     * @see Crypt_Hash::setKey()
+     * @var String
      * @access private
      */
-    var $key = false;
+    var $key = '';
 
     /**
      * Outer XOR (Internal HMAC)
      *
-     * @see self::setKey()
-     * @var string
+     * @see Crypt_Hash::setKey()
+     * @var String
      * @access private
      */
     var $opad;
@@ -124,8 +128,8 @@
     /**
      * Inner XOR (Internal HMAC)
      *
-     * @see self::setKey()
-     * @var string
+     * @see Crypt_Hash::setKey()
+     * @var String
      * @access private
      */
     var $ipad;
@@ -133,22 +137,22 @@
     /**
      * Default Constructor.
      *
-     * @param string $hash
-     * @return \phpseclib\Crypt\Hash
+     * @param optional String $hash
+     * @return Crypt_Hash
      * @access public
      */
-    function __construct($hash = 'sha1')
+    function Crypt_Hash($hash = 'sha1')
     {
-        if (!defined('CRYPT_HASH_MODE')) {
+        if ( !defined('CRYPT_HASH_MODE') ) {
             switch (true) {
                 case extension_loaded('hash'):
-                    define('CRYPT_HASH_MODE', self::MODE_HASH);
+                    define('CRYPT_HASH_MODE', CRYPT_HASH_MODE_HASH);
                     break;
                 case extension_loaded('mhash'):
-                    define('CRYPT_HASH_MODE', self::MODE_MHASH);
+                    define('CRYPT_HASH_MODE', CRYPT_HASH_MODE_MHASH);
                     break;
                 default:
-                    define('CRYPT_HASH_MODE', self::MODE_INTERNAL);
+                    define('CRYPT_HASH_MODE', CRYPT_HASH_MODE_INTERNAL);
             }
         }
 
@@ -161,41 +165,24 @@
      * Keys can be of any length.
      *
      * @access public
-     * @param string $key
+     * @param String $key
      */
-    function setKey($key = false)
+    function setKey($key)
     {
         $this->key = $key;
     }
 
     /**
-     * Gets the hash function.
-     *
-     * As set by the constructor or by the setHash() method.
-     *
-     * @access public
-     * @return string
-     */
-    function getHash()
-    {
-        return $this->hashParam;
-    }
-
-    /**
      * Sets the hash function.
      *
      * @access public
-     * @param string $hash
+     * @param String $hash
      */
     function setHash($hash)
     {
-        $this->hashParam = $hash = strtolower($hash);
         switch ($hash) {
             case 'md5-96':
             case 'sha1-96':
-            case 'sha256-96':
-            case 'sha512-96':
-                $hash = substr($hash, 0, -3);
                 $this->l = 12; // 96 / 8 = 12
                 break;
             case 'md2':
@@ -217,43 +204,45 @@
 
         switch ($hash) {
             case 'md2':
-                $mode = CRYPT_HASH_MODE == self::MODE_HASH && in_array('md2', hash_algos()) ?
-                    self::MODE_HASH : self::MODE_INTERNAL;
+                $mode = CRYPT_HASH_MODE_INTERNAL;
                 break;
             case 'sha384':
             case 'sha512':
-                $mode = CRYPT_HASH_MODE == self::MODE_MHASH ? self::MODE_INTERNAL : CRYPT_HASH_MODE;
+                $mode = CRYPT_HASH_MODE == CRYPT_HASH_MODE_MHASH ? CRYPT_HASH_MODE_INTERNAL : CRYPT_HASH_MODE;
                 break;
             default:
                 $mode = CRYPT_HASH_MODE;
         }
 
-        switch ($mode) {
-            case self::MODE_MHASH:
+        switch ( $mode ) {
+            case CRYPT_HASH_MODE_MHASH:
                 switch ($hash) {
                     case 'md5':
+                    case 'md5-96':
                         $this->hash = MHASH_MD5;
                         break;
                     case 'sha256':
                         $this->hash = MHASH_SHA256;
                         break;
                     case 'sha1':
+                    case 'sha1-96':
                     default:
                         $this->hash = MHASH_SHA1;
                 }
                 return;
-            case self::MODE_HASH:
+            case CRYPT_HASH_MODE_HASH:
                 switch ($hash) {
                     case 'md5':
+                    case 'md5-96':
                         $this->hash = 'md5';
                         return;
-                    case 'md2':
                     case 'sha256':
                     case 'sha384':
                     case 'sha512':
                         $this->hash = $hash;
                         return;
                     case 'sha1':
+                    case 'sha1-96':
                     default:
                         $this->hash = 'sha1';
                 }
@@ -262,26 +251,28 @@
 
         switch ($hash) {
             case 'md2':
-                $this->b = 16;
-                $this->hash = array($this, '_md2');
-                break;
+                 $this->b = 16;
+                 $this->hash = array($this, '_md2');
+                 break;
             case 'md5':
-                $this->b = 64;
-                $this->hash = array($this, '_md5');
-                break;
+            case 'md5-96':
+                 $this->b = 64;
+                 $this->hash = array($this, '_md5');
+                 break;
             case 'sha256':
-                $this->b = 64;
-                $this->hash = array($this, '_sha256');
-                break;
+                 $this->b = 64;
+                 $this->hash = array($this, '_sha256');
+                 break;
             case 'sha384':
             case 'sha512':
-                $this->b = 128;
-                $this->hash = array($this, '_sha512');
-                break;
+                 $this->b = 128;
+                 $this->hash = array($this, '_sha512');
+                 break;
             case 'sha1':
+            case 'sha1-96':
             default:
-                $this->b = 64;
-                $this->hash = array($this, '_sha1');
+                 $this->b = 64;
+                 $this->hash = array($this, '_sha1');
         }
 
         $this->ipad = str_repeat(chr(0x36), $this->b);
@@ -292,27 +283,27 @@
      * Compute the HMAC.
      *
      * @access public
-     * @param string $text
-     * @return string
+     * @param String $text
+     * @return String
      */
     function hash($text)
     {
-        $mode = is_array($this->hash) ? self::MODE_INTERNAL : CRYPT_HASH_MODE;
+        $mode = is_array($this->hash) ? CRYPT_HASH_MODE_INTERNAL : CRYPT_HASH_MODE;
 
-        if (!empty($this->key) || is_string($this->key)) {
-            switch ($mode) {
-                case self::MODE_MHASH:
+        if (!empty($this->key)) {
+            switch ( $mode ) {
+                case CRYPT_HASH_MODE_MHASH:
                     $output = mhash($this->hash, $text, $this->key);
                     break;
-                case self::MODE_HASH:
+                case CRYPT_HASH_MODE_HASH:
                     $output = hash_hmac($this->hash, $text, $this->key, true);
                     break;
-                case self::MODE_INTERNAL:
+                case CRYPT_HASH_MODE_INTERNAL:
                     /* "Applications that use keys longer than B bytes will first hash the key using H and then use the
                         resultant L byte string as the actual key to HMAC."
 
                         -- http://tools.ietf.org/html/rfc2104#section-2 */
-                    $key = strlen($this->key) > $this->b ? call_user_func($this->hash, $this->key) : $this->key;
+                    $key = strlen($this->key) > $this->b ? call_user_func($this->$hash, $this->key) : $this->key;
 
                     $key    = str_pad($key, $this->b, chr(0));      // step 1
                     $temp   = $this->ipad ^ $key;                   // step 2
@@ -323,14 +314,14 @@
                     $output = call_user_func($this->hash, $output); // step 7
             }
         } else {
-            switch ($mode) {
-                case self::MODE_MHASH:
+            switch ( $mode ) {
+                case CRYPT_HASH_MODE_MHASH:
                     $output = mhash($this->hash, $text);
                     break;
-                case self::MODE_HASH:
+                case CRYPT_HASH_MODE_HASH:
                     $output = hash($this->hash, $text, true);
                     break;
-                case self::MODE_INTERNAL:
+                case CRYPT_HASH_MODE_INTERNAL:
                     $output = call_user_func($this->hash, $text);
             }
         }
@@ -341,8 +332,8 @@
     /**
      * Returns the hash length (in bytes)
      *
-     * @access public
-     * @return int
+     * @access private
+     * @return Integer
      */
     function getLength()
     {
@@ -353,7 +344,7 @@
      * Wrapper for MD5
      *
      * @access private
-     * @param string $m
+     * @param String $text
      */
     function _md5($m)
     {
@@ -364,7 +355,7 @@
      * Wrapper for SHA1
      *
      * @access private
-     * @param string $m
+     * @param String $text
      */
     function _sha1($m)
     {
@@ -377,7 +368,7 @@
      * See {@link http://tools.ietf.org/html/rfc1319 RFC1319}.
      *
      * @access private
-     * @param string $m
+     * @param String $text
      */
     function _md2($m)
     {
@@ -413,10 +404,7 @@
         $l = chr(0);
         for ($i = 0; $i < $length; $i+= 16) {
             for ($j = 0; $j < 16; $j++) {
-                // RFC1319 incorrectly states that C[j] should be set to S[c xor L]
-                //$c[$j] = chr($s[ord($m[$i + $j] ^ $l)]);
-                // per <http://www.rfc-editor.org/errata_search.php?rfc=1319>, however, C[j] should be set to S[c xor L] xor C[j]
-                $c[$j] = chr($s[ord($m[$i + $j] ^ $l)] ^ ord($c[$j]));
+                $c[$j] = chr($s[ord($m[$i + $j] ^ $l)]);
                 $l = $c[$j];
             }
         }
@@ -453,7 +441,7 @@
      * See {@link http://en.wikipedia.org/wiki/SHA_hash_functions#SHA-256_.28a_SHA-2_variant.29_pseudocode SHA-256 (a SHA-2 variant) pseudocode - Wikipedia}.
      *
      * @access private
-     * @param string $m
+     * @param String $text
      */
     function _sha256($m)
     {
@@ -497,15 +485,14 @@
 
             // Extend the sixteen 32-bit words into sixty-four 32-bit words
             for ($i = 16; $i < 64; $i++) {
-                // @codingStandardsIgnoreStart
                 $s0 = $this->_rightRotate($w[$i - 15],  7) ^
                       $this->_rightRotate($w[$i - 15], 18) ^
                       $this->_rightShift( $w[$i - 15],  3);
                 $s1 = $this->_rightRotate($w[$i - 2], 17) ^
                       $this->_rightRotate($w[$i - 2], 19) ^
                       $this->_rightShift( $w[$i - 2], 10);
-                // @codingStandardsIgnoreEnd
                 $w[$i] = $this->_add($w[$i - 16], $s0, $w[$i - 7], $s1);
+
             }
 
             // Initialize hash value for this chunk
@@ -559,27 +546,31 @@
      * Pure-PHP implementation of SHA384 and SHA512
      *
      * @access private
-     * @param string $m
+     * @param String $text
      */
     function _sha512($m)
     {
+        if (!class_exists('Math_BigInteger')) {
+            require_once('Math/BigInteger.php');
+        }
+
         static $init384, $init512, $k;
 
         if (!isset($k)) {
             // Initialize variables
             $init384 = array( // initial values for SHA384
-                'cbbb9d5dc1059ed8', '629a292a367cd507', '9159015a3070dd17', '152fecd8f70e5939',
+                'cbbb9d5dc1059ed8', '629a292a367cd507', '9159015a3070dd17', '152fecd8f70e5939', 
                 '67332667ffc00b31', '8eb44a8768581511', 'db0c2e0d64f98fa7', '47b5481dbefa4fa4'
             );
             $init512 = array( // initial values for SHA512
-                '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1',
+                '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1', 
                 '510e527fade682d1', '9b05688c2b3e6c1f', '1f83d9abfb41bd6b', '5be0cd19137e2179'
             );
 
             for ($i = 0; $i < 8; $i++) {
-                $init384[$i] = new BigInteger($init384[$i], 16);
+                $init384[$i] = new Math_BigInteger($init384[$i], 16);
                 $init384[$i]->setPrecision(64);
-                $init512[$i] = new BigInteger($init512[$i], 16);
+                $init512[$i] = new Math_BigInteger($init512[$i], 16);
                 $init512[$i]->setPrecision(64);
             }
 
@@ -609,7 +600,7 @@
             );
 
             for ($i = 0; $i < 80; $i++) {
-                $k[$i] = new BigInteger($k[$i], 16);
+                $k[$i] = new Math_BigInteger($k[$i], 16);
             }
         }
 
@@ -628,7 +619,7 @@
         foreach ($chunks as $chunk) {
             $w = array();
             for ($i = 0; $i < 16; $i++) {
-                $temp = new BigInteger($this->_string_shift($chunk, 8), 256);
+                $temp = new Math_BigInteger($this->_string_shift($chunk, 8), 256);
                 $temp->setPrecision(64);
                 $w[] = $temp;
             }
@@ -724,7 +715,7 @@
         }
 
         // Produce the final hash value (big-endian)
-        // (\phpseclib\Crypt\Hash::hash() trims the output for hashes but not for HMACs.  as such, we trim the output here)
+        // (Crypt_Hash::hash() trims the output for hashes but not for HMACs.  as such, we trim the output here)
         $temp = $hash[0]->toBytes() . $hash[1]->toBytes() . $hash[2]->toBytes() . $hash[3]->toBytes() .
                 $hash[4]->toBytes() . $hash[5]->toBytes();
         if ($this->l != 48) {
@@ -738,10 +729,10 @@
      * Right Rotate
      *
      * @access private
-     * @param int $int
-     * @param int $amt
-     * @see self::_sha256()
-     * @return int
+     * @param Integer $int
+     * @param Integer $amt
+     * @see _sha256()
+     * @return Integer
      */
     function _rightRotate($int, $amt)
     {
@@ -754,10 +745,10 @@
      * Right Shift
      *
      * @access private
-     * @param int $int
-     * @param int $amt
-     * @see self::_sha256()
-     * @return int
+     * @param Integer $int
+     * @param Integer $amt
+     * @see _sha256()
+     * @return Integer
      */
     function _rightShift($int, $amt)
     {
@@ -769,9 +760,9 @@
      * Not
      *
      * @access private
-     * @param int $int
-     * @see self::_sha256()
-     * @return int
+     * @param Integer $int
+     * @see _sha256()
+     * @return Integer
      */
     function _not($int)
     {
@@ -782,11 +773,12 @@
      * Add
      *
      * _sha256() adds multiple unsigned 32-bit integers.  Since PHP doesn't support unsigned integers and since the
-     * possibility of overflow exists, care has to be taken.  BigInteger could be used but this should be faster.
+     * possibility of overflow exists, care has to be taken.  Math_BigInteger() could be used but this should be faster.
      *
-     * @param int $...
-     * @return int
-     * @see self::_sha256()
+     * @param String $string
+     * @param optional Integer $index
+     * @return String
+     * @see _sha256()
      * @access private
      */
     function _add()
@@ -802,12 +794,7 @@
             $result+= $argument < 0 ? ($argument & 0x7FFFFFFF) + 0x80000000 : $argument;
         }
 
-        if ((php_uname('m') & "\xDF\xDF\xDF") != 'ARM') {
-            return fmod($result, $mod);
-        }
-
-        return (fmod($result, 0x80000000) & 0x7FFFFFFF) |
-            ((fmod(floor($result / 0x80000000), 2) & 1) << 31);
+        return fmod($result, $mod);
     }
 
     /**
@@ -815,9 +802,9 @@
      *
      * Inspired by array_shift
      *
-     * @param string $string
-     * @param int $index
-     * @return string
+     * @param String $string
+     * @param optional Integer $index
+     * @return String
      * @access private
      */
     function _string_shift(&$string, $index = 1)
